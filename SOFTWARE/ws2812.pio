; Copyright (c) 2025 GhostLab42 LLC & GBFans LLC
; Licensed under the MIT License. See LICENSE file for details.

; Copyright (c) 2020 Raspberry Pi (Trading) Ltd.
; SPDX-License-Identifier: BSD-3-Clause
.pio_version 0 // only requires PIO version 0


;****************************;
; PowerCell addressable LEDs ;
;                            ;
; Linear set of 15 LEDs      ;
;****************************;

.program powercell  // program name
.side_set 1         // using one bit of the delay bits for use of "side-set" 

; Definitions for proper Powercell operation
.define public GPIO_N 3  // fixed for PackCombo board

; The following constants are selected for broad compatibility with WS2812,
; WS2812B, and SK6812 LEDs.
;           <----T1----> <----T2----> <----T3---->
;          |____________|            |            |
;Data=0 ___/            \____________|____________|
;           _________________________|            |
;Data=1 ___/                         \____________|
;
.define public T1 2
.define public T2 5
.define public T3 3

 ; frequecy of operation (should be 800000, but was not reliable)
.define public FREQ 700000

.wrap_target
bitloop:
    out x, 1       side 0 [T3 - 1] ; Side-set still takes place when instruction stalls
    jmp !x do_zero side 1 [T1 - 1] ; Branch on the bit we shifted out. Positive pulse
do_one:
    jmp  bitloop   side 1 [T1 - 1] ; Continue driving high, for a long pulse
do_zero:
    nop            side 0 [T2 - 1] ; Or drive low, for a short pulse
.wrap

% c-sdk {
#include "hardware/clocks.h"

static inline void powercell_program_init(PIO pio, uint sm, uint offset, uint num_bits) {

    pio_gpio_init(pio, powercell_GPIO_N);
    pio_sm_set_consecutive_pindirs(pio, sm, powercell_GPIO_N, 1, true);

    pio_sm_config c = powercell_program_get_default_config(offset);
    sm_config_set_sideset_pins(&c, powercell_GPIO_N);
    sm_config_set_out_shift(&c, false, true, num_bits);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);

    int cycles_per_bit = powercell_T1 + powercell_T2 + powercell_T3;
    float div = clock_get_hz(clk_sys) / (powercell_FREQ * cycles_per_bit);
    sm_config_set_clkdiv(&c, div);

    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}
%}


;****************************;
; Cyclotron addressable LEDs ;
;                            ;
; Circular set of 40 LEDs    ;
;****************************;

.program cyclotron  // program name
.side_set 1         // using one bit of the delay bits for use of "side-set" 

; Definitions for proper Cyclotron operation
.define public GPIO_N 4  // fixed for PackCombo board

; The following constants are selected for broad compatibility with WS2812,
; WS2812B, and SK6812 LEDs.
;           <----T1----> <----T2----> <----T3---->
;          |____________|            |            |
;Data=0 ___/            \____________|____________|
;           _________________________|            |
;Data=1 ___/                         \____________|
;
.define public T1 2
.define public T2 5
.define public T3 3

 ; frequecy of operation (should be 800000, but was not reliable)
.define public FREQ 700000

.wrap_target
bitloop:
    out x, 1       side 0 [T3 - 1] ; Side-set still takes place when instruction stalls
    jmp !x do_zero side 1 [T1 - 1] ; Branch on the bit we shifted out. Positive pulse
do_one:
    jmp  bitloop   side 1 [T1 - 1] ; Continue driving high, for a long pulse
do_zero:
    nop            side 0 [T2 - 1] ; Or drive low, for a short pulse
.wrap

% c-sdk {
#include "hardware/clocks.h"

static inline void cyclotron_program_init(PIO pio, uint sm, uint offset, uint num_bits) {

    pio_gpio_init(pio, cyclotron_GPIO_N);
    pio_sm_set_consecutive_pindirs(pio, sm, cyclotron_GPIO_N, 1, true);

    pio_sm_config c = cyclotron_program_get_default_config(offset);
    sm_config_set_sideset_pins(&c, cyclotron_GPIO_N);
    sm_config_set_out_shift(&c, false, true, num_bits);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);

    int cycles_per_bit = cyclotron_T1 + cyclotron_T2 + cyclotron_T3;
    float div = clock_get_hz(clk_sys) / (cyclotron_FREQ * cycles_per_bit);
    sm_config_set_clkdiv(&c, div);

    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}
%}


;****************************;
; Future addressable LEDs    ;
;                            ;
; Circular set of 12 LEDs?   ;
;****************************;

.program future  // program name
.side_set 1         // using one bit of the delay bits for use of "side-set" 

; Definitions for proper Future connection operation
.define public GPIO_N 5  // fixed for PackCombo board

; The following constants are selected for broad compatibility with WS2812,
; WS2812B, and SK6812 LEDs.
;           <----T1----> <----T2----> <----T3---->
;          |____________|            |            |
;Data=0 ___/            \____________|____________|
;           _________________________|            |
;Data=1 ___/                         \____________|
;
.define public T1 2
.define public T2 5
.define public T3 3

 ; frequecy of operation (should be 800000, but was not reliable)
.define public FREQ 700000

.wrap_target
bitloop:
    out x, 1       side 0 [T3 - 1] ; Side-set still takes place when instruction stalls
    jmp !x do_zero side 1 [T1 - 1] ; Branch on the bit we shifted out. Positive pulse
do_one:
    jmp  bitloop   side 1 [T1 - 1] ; Continue driving high, for a long pulse
do_zero:
    nop            side 0 [T2 - 1] ; Or drive low, for a short pulse
.wrap

% c-sdk {
#include "hardware/clocks.h"

static inline void future_program_init(PIO pio, uint sm, uint offset, uint num_bits) {

    pio_gpio_init(pio, future_GPIO_N);
    pio_sm_set_consecutive_pindirs(pio, sm, future_GPIO_N, 1, true);

    pio_sm_config c = future_program_get_default_config(offset);
    sm_config_set_sideset_pins(&c, future_GPIO_N);
    sm_config_set_out_shift(&c, false, true, num_bits);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);

    int cycles_per_bit = future_T1 + future_T2 + future_T3;
    float div = clock_get_hz(clk_sys) / (future_FREQ * cycles_per_bit);
    sm_config_set_clkdiv(&c, div);

    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}
%}