/*
 * Copyright (c) 2025 GhostLab42 LLC & GBFans LLC
 * Licensed under the MIT License. See LICENSE file for details.
 */

// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// --------- //
// powercell //
// --------- //

#define powercell_wrap_target 0
#define powercell_wrap 3
#define powercell_pio_version 0

#define powercell_GPIO_N 3
#define powercell_T1 2
#define powercell_T2 5
#define powercell_T3 3
#define powercell_FREQ 700000

static const uint16_t powercell_program_instructions[] = {
            //     .wrap_target
    0x6221, //  0: out    x, 1            side 0 [2]
    0x1123, //  1: jmp    !x, 3           side 1 [1]
    0x1100, //  2: jmp    0               side 1 [1]
    0xa442, //  3: nop                    side 0 [4]
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program powercell_program = {
    .instructions = powercell_program_instructions,
    .length = 4,
    .origin = -1,
    .pio_version = powercell_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config powercell_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + powercell_wrap_target, offset + powercell_wrap);
    sm_config_set_sideset(&c, 1, false, false);
    return c;
}

#include "hardware/clocks.h"
static inline void powercell_program_init(PIO pio, uint sm, uint offset, uint num_bits) {
    pio_gpio_init(pio, powercell_GPIO_N);
    pio_sm_set_consecutive_pindirs(pio, sm, powercell_GPIO_N, 1, true);
    pio_sm_config c = powercell_program_get_default_config(offset);
    sm_config_set_sideset_pins(&c, powercell_GPIO_N);
    sm_config_set_out_shift(&c, false, true, num_bits);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    int cycles_per_bit = powercell_T1 + powercell_T2 + powercell_T3;
    float div = clock_get_hz(clk_sys) / (powercell_FREQ * cycles_per_bit);
    sm_config_set_clkdiv(&c, div);
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

#endif

// --------- //
// cyclotron //
// --------- //

#define cyclotron_wrap_target 0
#define cyclotron_wrap 3
#define cyclotron_pio_version 0

#define cyclotron_GPIO_N 4
#define cyclotron_T1 2
#define cyclotron_T2 5
#define cyclotron_T3 3
#define cyclotron_FREQ 700000

static const uint16_t cyclotron_program_instructions[] = {
            //     .wrap_target
    0x6221, //  0: out    x, 1            side 0 [2]
    0x1123, //  1: jmp    !x, 3           side 1 [1]
    0x1100, //  2: jmp    0               side 1 [1]
    0xa442, //  3: nop                    side 0 [4]
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program cyclotron_program = {
    .instructions = cyclotron_program_instructions,
    .length = 4,
    .origin = -1,
    .pio_version = cyclotron_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config cyclotron_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + cyclotron_wrap_target, offset + cyclotron_wrap);
    sm_config_set_sideset(&c, 1, false, false);
    return c;
}

#include "hardware/clocks.h"
static inline void cyclotron_program_init(PIO pio, uint sm, uint offset, uint num_bits) {
    pio_gpio_init(pio, cyclotron_GPIO_N);
    pio_sm_set_consecutive_pindirs(pio, sm, cyclotron_GPIO_N, 1, true);
    pio_sm_config c = cyclotron_program_get_default_config(offset);
    sm_config_set_sideset_pins(&c, cyclotron_GPIO_N);
    sm_config_set_out_shift(&c, false, true, num_bits);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    int cycles_per_bit = cyclotron_T1 + cyclotron_T2 + cyclotron_T3;
    float div = clock_get_hz(clk_sys) / (cyclotron_FREQ * cycles_per_bit);
    sm_config_set_clkdiv(&c, div);
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

#endif

// ------ //
// future //
// ------ //

#define future_wrap_target 0
#define future_wrap 3
#define future_pio_version 0

#define future_GPIO_N 5
#define future_T1 2
#define future_T2 5
#define future_T3 3
#define future_FREQ 700000

static const uint16_t future_program_instructions[] = {
            //     .wrap_target
    0x6221, //  0: out    x, 1            side 0 [2]
    0x1123, //  1: jmp    !x, 3           side 1 [1]
    0x1100, //  2: jmp    0               side 1 [1]
    0xa442, //  3: nop                    side 0 [4]
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program future_program = {
    .instructions = future_program_instructions,
    .length = 4,
    .origin = -1,
    .pio_version = future_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config future_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + future_wrap_target, offset + future_wrap);
    sm_config_set_sideset(&c, 1, false, false);
    return c;
}

#include "hardware/clocks.h"
static inline void future_program_init(PIO pio, uint sm, uint offset, uint num_bits) {
    pio_gpio_init(pio, future_GPIO_N);
    pio_sm_set_consecutive_pindirs(pio, sm, future_GPIO_N, 1, true);
    pio_sm_config c = future_program_get_default_config(offset);
    sm_config_set_sideset_pins(&c, future_GPIO_N);
    sm_config_set_out_shift(&c, false, true, num_bits);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    int cycles_per_bit = future_T1 + future_T2 + future_T3;
    float div = clock_get_hz(clk_sys) / (future_FREQ * cycles_per_bit);
    sm_config_set_clkdiv(&c, div);
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

#endif

